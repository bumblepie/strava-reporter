frameworkVersion: '3'

service: strava-reporter

useDotenv: true

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, "dev"}
  profile: personal
  region: us-west-2
  environment:
    ACTIVITY_TOPIC_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:service}-${self:provider.stage}-activities
    USERS_DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-users
    MESSAGES_DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-messages
    CLIENT_ID: "${env:CLIENT_ID}"
    CLIENT_SECRET: "${env:CLIENT_SECRET}"
    DISCORD_WEBHOOK_URL: ${env:DISCORD_WEBHOOK_URL}
    REQUESTS_LAYER_ARN: ${env:REQUESTS_LAYER_ARN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:*:table/${self:service}-${self:provider.stage}-*"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: ${self:provider.environment.ACTIVITY_TOPIC_ARN}

functions:
  subscribe:
    handler: events.handler.subscribe
    events:
      - http:
          path: strava/webhook
          method: GET

  authorize-user:
    handler: auth.handler.authorize
    layers:
      - ${self:provider.environment.REQUESTS_LAYER_ARN}
    events:
      - http:
          path: strava/authorize
          method: GET

  receive-event:
    handler: events.handler.receive_event
    layers:
      - ${self:provider.environment.REQUESTS_LAYER_ARN}
    events:
      - http:
          path: strava/webhook
          method: POST

  post-event:
    handler: events.handler.post_event
    layers:
      - ${self:provider.environment.REQUESTS_LAYER_ARN}
    events:
      - sns:
          topicName: ${self:service}-${self:provider.stage}-activities
          displayName: New strava activity topic

resources:
  Resources:
    TokenStore:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: "${self:provider.environment.USERS_DYNAMODB_TABLE}"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    WebhookMessages:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: "${self:provider.environment.MESSAGES_DYNAMODB_TABLE}"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: activity_id
            AttributeType: N
        KeySchema:
          - AttributeName: activity_id
            KeyType: HASH

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
